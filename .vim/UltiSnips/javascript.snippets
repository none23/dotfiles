snippet ind "index file" b
// @flow strict
export * from './${1:File}';
export { default } from './${1:File}';
endsnippet

snippet fsx "theme-ui/emotion component" b
// @flow strict
// @jsx jsx
import * as React from 'react';
import graphql from 'graphql-tag';
import { css } from '@emotion/core';
import { jsx } from 'theme-ui';

type Props = {
	className?: string,
	css?: any,
	sx?: {[prop: string]: any...},
};

const ${1:Component} = ({ className,
}: Props) => {
	return (
		<div className={className} sx={{
		}}>
		</div>
	);
};

${1:Component}.fragmants = {
};
${1:Component}.defaultProps = {
};
export default $1;
endsnippet

snippet fff "flow functional component" b
// @flow strict
import * as React from 'react';
import graphql from 'graphql-tag';
import { css } from '@emotion/core';
import { jsx } from 'theme-ui';

type Props = {
	className?: string,
	css?: any,
	sx?: {[prop: string]: any...},
};

const ${1:Component} = ({ className,
}: Props) => {
	<div className={className}>
	</div>
);

export default $1;
endsnippet


snippet im "import" b
import $1 from '$1';
endsnippet

snippet imn "import {...}" b
import { $1 } from '$2';
endsnippet

snippet ir "import React" b
import * as React from 'react';
endsnippet

snippet uf "useFragment" b
// @flow strict
import * as React from 'react';
import { useQuery, gql } from '@apollo/client';

const ${1:Component}.fragmants = {
	${2:prop}: gql`
		fragmant $1_$2 on SomeType {
		  __typename
			id
		}
	`,
}

function use$1() {
  const { data } = useQuery($1);
	return data
}

export default use$1;
endsnippet

snippet exa "export as"
export { $1 as $2 };
endsnippet

snippet exd "export default"
export default $1;
endsnippet

snippet exf "export from"
export $1 from '$2';
endsnippet

snippet cdm "component did mount"
componentDidMount () {
	$0
}
endsnippet

snippet cdup "component did update"
componentDidUpdate (prevProps, prevState) {
	$0
}
endsnippet

snippet cwum "component will unmount"
componentWillUnmount () {
	$0
}
endsnippet

snippet dp "static defaultProps"
static defaultProps = {
	className: '',
};
endsnippet

snippet mapdbg "map debugger"
.map(x => { debugger; return x; })
endsnippet

snippet maplog "map log"
.map(x => { console.log(x); return x; })
endsnippet

snippet edf "eslint-disable"
/* eslint-disable $1 */
/* eslint-enable $1 */
endsnippet

snippet edl "eslint-disable-line"
// eslint-disable-line $1
endsnippet

snippet edn "eslint-disable-next-line"
// eslint-disable-next-line $1
endsnippet

snippet fdn "flowlint-next-line"
// flowlint-next-line $1
endsnippet

snippet pdn "prettier ignore"
// prettier-ignore $1
endsnippet
