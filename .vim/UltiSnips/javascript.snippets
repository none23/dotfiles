snippet ind "index file" b
// @flow strict

import $1 from './${1:File}';

export * from './${1:File}';
export default $1;
endsnippet

snippet cc "class component" b
// @flow strict

import * as React from 'react';
import cn from 'clsx';

import s from './$1.scss';

type Props = {|
|};

type State = {|
|};

class ${1:ClassComponent} extends React.Component<Props, State> {
	static defaultProps = {
	};

  state = {
  };

	render() {
		return (
			<div className={s.$1}>
			</div>
		);
	};
};

export default $1;
endsnippet

snippet fc "flow functional component" b
// @flow strict

import * as React from 'react';

import s from './$1.scss';

type Props = {|
|};

const $1 = ({
}: Props) => (
	<div className={s.$1}>
	</div>
);

export default $1;
endsnippet


snippet fff "flow functional component" b
// @flow strict

import * as React from 'react';

import s from './$1.scss';

type Props = {|
	$3,
|};

const $1 = ({
	$3,
}: Props) => {
	return (
		<{$2:div} className={s.$1}>
		</$2>
	);
};

export default $1;
endsnippet

snippet im "import" b
import $1 from '$1';
endsnippet

snippet imn "import {...}" b
import { $1 } from '$2';
endsnippet

snippet ir "import React" b
import * as React from 'react';
endsnippet

snippet uq "useQuery" b
// @flow strict

import * as React from 'react';
import gql from 'graphql-tag';
import { useQuery } from '@apollo/react-hooks';
import type { $1 as $1T } from './__generated__/$1';

const $1 = gql`
  query $1 {
  }
`;

function use$1() {
  const { data } = useQuery($1);
	return data
}

export default use$1;
endsnippet

snippet exa "export as"
export { $1 as $2 };
endsnippet

snippet exd "export default"
export default $1;
endsnippet

snippet exf "export from"
export $1 from '$2';
endsnippet

snippet cdm "component did mount"
componentDidMount () {
	$0
}
endsnippet

snippet cdup "component did update"
componentDidUpdate (prevProps, prevState) {
	$0
}
endsnippet

snippet cwum "component will unmount"
componentWillUnmount () {
	$0
}
endsnippet

snippet dp "static defaultProps"
static defaultProps = {
	className: '',
};
endsnippet

snippet mapdbg "map debugger"
.map(x => { debugger; return x; })
endsnippet

snippet maplog "map log"
.map(x => { console.log(x); return x; })
endsnippet

snippet edf "eslint-disable"
/* eslint-disable $1 */
/* eslint-enable $1 */
endsnippet

snippet edl "eslint-disable-line"
// eslint-disable-line $1
endsnippet

snippet edn "eslint-disable-next-line"
// eslint-disable-next-line $1
endsnippet

snippet fdn "flowlint-next-line"
// flowlint-next-line $1
endsnippet

snippet pdn "prettier ignore"
// prettier-ignore $1
endsnippet
